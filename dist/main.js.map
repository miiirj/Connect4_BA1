{"version":3,"sources":["webpack:///./src/algorithms/minimax.js","webpack:///./src/algorithms/algorithm.js","webpack:///./src/index.js"],"names":["MiniMax","board","this","b","state","Math","floor","random","playBoard","super","evaluationTable","nextMove","console","log","minimax","getPlayField","currentNode","i","length","j","node","value","row","horizontalString","moveArray","counter","playersign","column","newBoard","map","arr","slice","depth","isMaximizingPlayer","bestVal","playermoves","getPossibleMoves","noMoreMoves","evaluate","getNewBoard","boardHTML","document","getElementById","player","playerFinalGoal","addDiv","algorithm","play","emptyField","createElement","className","addEventListener","addItem","appendChild","currentElement","getElementsByClassName","classList","contains","setField","giveMeColumn","add","checkIfGameDone","checkHorizontal","includes","checkVertical","checkDiagonalsltrb","checkDiagonalslbrt","showGameFinishedMessage","finalMessage","winnerField","winnerText","style","display","innerHTML","verticalString","leftTop","bottomRight","myString","err","bottomLeft","topRight","numbers","parseInt","setTimeout","getNextMove"],"mappings":"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","file":"main.js","sourcesContent":["import Algorithm from \"./algorithm.js\";\r\n\r\nexport default class MiniMax extends Algorithm {\r\n    constructor(board) {\r\n        super(board);\r\n\r\n        this.evaluationTable = [\r\n            [3, 4, 5, 7, 5, 4, 3], \r\n            [4, 6, 8, 10, 8, 6, 4],\r\n            [5, 8, 11, 13, 11, 8, 5], \r\n            [5, 8, 11, 13, 11, 8, 5],\r\n            [4, 6, 8, 10, 8, 6, 4],\r\n            [3, 4, 5, 7, 5, 4, 3]\r\n        ];\r\n\r\n        this.nextMove = 0;\r\n    }\r\n\r\n    play() {\r\n        console.log(\"I am Minimax\");\r\n        //console.log(this.getBoard());\r\n        //console.log(this.getPlayField());\r\n        \r\n        //this.minimax(this.getPlayField(), 2, true); // 10 not good (takes way too long) 5-4 may be okay\r\n        console.log(this.minimax(this.getPlayField(), 4, true) + \" endresult\");\r\n        console.log(\"Chosen Move \" + this.nextMove);\r\n        //console.log(this.getPlayField());\r\n    }\r\n\r\n    getNextMove() {\r\n        return this.nextMove;\r\n    }\r\n\r\n\r\n    noMoreMoves(currentNode) {\r\n        for (let i = 0; i < currentNode.length; i++) {\r\n            for (let j = 0; j < currentNode[i].length; j++) {\r\n                if (currentNode[i][j] != \"0\") {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // https://softwareengineering.stackexchange.com/questions/263514/why-does-this-evaluation-function-work-in-a-connect-four-game-in-java\r\n    \r\n\r\n    evaluate(node) {\r\n        let value = 0;\r\n        let utility = 138;\r\n\r\n\r\n\r\n\r\n        for (let i = 0; i < node.length; i++)\r\n            for (let j = 0; j < node[i].length; j++)\r\n                if (node[i][j] == 'o')\r\n                    value += this.evaluationTable[i][j];\r\n                else if (node[i][j] == 'x')\r\n                    value -= this.evaluationTable[i][j];\r\n\r\n        return value + utility;\r\n    }\r\n\r\n\r\n    checkHorizontal(row) {\r\n        let horizontalString = \"\";\r\n        for (let i = 0; i < this.playBoard[row].length; i++) {\r\n            horizontalString += this.playBoard[row][i];\r\n        }\r\n        return horizontalString;\r\n    }\r\n\r\n    checkHorizontals(node) {\r\n        for (let i = 0; i < node.length; i++) {\r\n            let string = \"\";\r\n            \r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n    getPossibleMoves(node) {\r\n        let moveArray = [];\r\n        let counter = 0;\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            if (node[0][i] == 0) {\r\n                moveArray[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n\r\n        return moveArray;\r\n    }\r\n\r\n    getNewBoard(node, playersign, column) {\r\n        let newBoard = node.map(function(arr){return arr.slice()});\r\n        let row = 0;\r\n        while(row < 5 && newBoard[row+1][column] == 0) {\r\n            row += 1;\r\n        }\r\n\r\n        newBoard[row][column] = playersign;\r\n        return newBoard;\r\n    }\r\n\r\n\r\n    minimax(node, depth, isMaximizingPlayer) {\r\n        let value;\r\n        let bestVal;\r\n        let playersign;\r\n        (isMaximizingPlayer) ? playersign = \"o\" : playersign = \"x\";\r\n        let playermoves = this.getPossibleMoves(node);\r\n\r\n\r\n        if (depth == 0 || this.noMoreMoves(node)) {\r\n            return this.evaluate(node);\r\n        }\r\n\r\n        if (isMaximizingPlayer) {\r\n            bestVal = -9999;\r\n            console.log(\"maximizing player\")\r\n            for (let i = 0; i < playermoves.length; i++) {\r\n                value = this.minimax(this.getNewBoard(node, playersign, playermoves[i]), depth-1, false);\r\n                if (bestVal < value) {\r\n                    bestVal = value;\r\n                    console.log(\"Value \" + value);\r\n                    this.nextMove = playermoves[i];\r\n\r\n                }\r\n            }\r\n            return this.evaluate(node);\r\n\r\n        } else {\r\n            bestVal = 9999;\r\n            console.log(\"minimizing player\")\r\n\r\n            for (let i = 0; i < playermoves.length; i++) {\r\n                value = this.minimax(this.getNewBoard(node, playersign, playermoves[i]), depth-1, true);\r\n                if (bestVal < value) {\r\n                    bestVal = value;\r\n                    console.log(\"Value \" + value);\r\n                    this.nextMove = playermoves[i];\r\n                }\r\n            }\r\n            return this.evaluate(node);\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n}","export default class Algorithm {\r\n    constructor(board) {\r\n        this.b = board;\r\n        this.state = {};\r\n    }\r\n\r\n    play() {}\r\n    \r\n    giveMeColumn() {\r\n        return Math.floor(Math.random() * 7);\r\n    }\r\n\r\n    getNextMove() {\r\n        return 6;\r\n    }\r\n\r\n    getBoard() {\r\n        return this.b;\r\n    }\r\n    \r\n    getPlayField() {\r\n        return this.b.playBoard\r\n    }\r\n}\r\n","import MiniMax from \"./algorithms/minimax.js\";\r\nimport MiniMaxAlphaBeta from \"./algorithms/minimaxab.js\";\r\nimport MCTS from \"./algorithms/mcts.js\";\r\n\r\nconst boardHTML = document.getElementById(\"board\");\r\n\r\nclass Board {\r\n    constructor() {\r\n        this.player = 0;\r\n        this.playerFinalGoal = \"\";\r\n\r\n        this.playBoard = [\r\n            [0,0,0,0,0,0,0], \r\n            [0,0,0,0,0,0,0], \r\n            [0,0,0,0,0,0,0], \r\n            [0,0,0,0,0,0,0], \r\n            [0,0,0,0,0,0,0], \r\n            [0,0,0,0,0,0,0]\r\n        ];\r\n\r\n        for (let i = 0; i < this.playBoard.length; i++) {\r\n            for (let j = 0; j < this.playBoard[i].length; j++) {\r\n                this.addDiv(i, j);\r\n            }\r\n        }\r\n\r\n        //let number = Math.floor(Math.random() * 3) + 1;\r\n        let number = 1;\r\n\r\n        switch(number) {\r\n            case 1: \r\n                this.algorithm = new MiniMax(this);\r\n                break;\r\n            case 2: \r\n                this.algorithm = new MiniMaxAlphaBeta(this);\r\n                break;\r\n            case 3: \r\n                this.algorithm = new MCTS(this);\r\n                break;\r\n        }\r\n        this.algorithm.play();\r\n    }\r\n\r\n    addDiv(i, j) {\r\n        let emptyField = document.createElement(\"div\");\r\n        emptyField.className = \"field \" + i + \"\" + j;\r\n        emptyField.addEventListener(\"click\", addItem);\r\n        boardHTML.appendChild(emptyField);\r\n    }\r\n\r\n\r\n    setField(column, playersign) {\r\n        let row = 0;\r\n        while(row < 5 && this.playBoard[row+1][column] == 0) {\r\n            row += 1;\r\n        }\r\n\r\n        this.playBoard[row][column] = playersign;\r\n\r\n        let currentElement = document.getElementsByClassName(row + \"\" + column);\r\n        if (!(currentElement[0].classList.contains(\"fieldYellow\") || currentElement[0].classList.contains(\"fieldRed\"))) {\r\n            if (playersign == 'x') {\r\n                currentElement[0].classList.add(\"fieldYellow\");\r\n                this.playerFinalGoal = \"xxxx\";\r\n            } else if (playersign == 'o') {\r\n                currentElement[0].classList.add(\"fieldRed\");\r\n                this.playerFinalGoal = \"oooo\";\r\n            }\r\n\r\n            // check if game won\r\n            this.checkIfGameDone(row, column)\r\n\r\n            this.player++;\r\n        } else {\r\n            if (playersign == 'o') {\r\n                this.setField(this.algorithm.giveMeColumn(), 'o');\r\n                console.log(\"Error\");\r\n            }\r\n        }\r\n    }\r\n\r\n    checkIfGameDone(row, column) {\r\n        if (this.checkHorizontal(row).includes(this.playerFinalGoal) || \r\n        this.checkVertical(column).includes(this.playerFinalGoal) || \r\n        this.checkDiagonalsltrb(row, column).includes(this.playerFinalGoal) ||\r\n        this.checkDiagonalslbrt(row, column).includes(this.playerFinalGoal)) {\r\n            console.log(\"Gewonnen\");\r\n            this.showGameFinishedMessage(\"WIN\");\r\n\r\n        }\r\n\r\n        if (this.player >= 42) {\r\n            console.log(\"Unentschieden\");\r\n            this.showGameFinishedMessage(\"DRAW\");\r\n\r\n        }\r\n    }\r\n\r\n    showGameFinishedMessage(finalMessage) {\r\n        let winnerField = document.getElementById(\"winner\");\r\n        let winnerText = document.getElementById(\"winnerText\");\r\n        winnerField.style.display = 'block';\r\n        if (finalMessage == \"WIN\") {\r\n            if (this.player % 2 == 0) {\r\n                winnerText.innerHTML = \"You win\";\r\n            } else {\r\n                winnerText.innerHTML = \"The Computer wins\";\r\n            }\r\n        } else if (finalMessage == \"DRAW\") {\r\n            winnerText.innerHTML = \"It is a Draw\";\r\n        }\r\n\r\n        // send to database here\r\n\r\n    }\r\n\r\n    // checking functions\r\n    checkHorizontal(row) {\r\n        let horizontalString = \"\";\r\n        for (let i = 0; i < this.playBoard[row].length; i++) {\r\n            horizontalString += this.playBoard[row][i];\r\n        }\r\n        return horizontalString;\r\n    }\r\n    \r\n    checkVertical(column) {\r\n        let verticalString = \"\";\r\n        for (let i = 0; i < this.playBoard.length; i++) {\r\n            verticalString += this.playBoard[i][column];\r\n        }\r\n        return verticalString;\r\n    }\r\n    \r\n    checkDiagonalsltrb(row, column) { // left top to rigth bottom\r\n        let leftTop = 0;\r\n        let bottomRight = 0;\r\n    \r\n        let myString = \"\";\r\n    \r\n        try {\r\n            for (let i = 0; i < 7; i++) {\r\n                let here = this.playBoard[row - i][column - i];\r\n                leftTop = i;\r\n            }\r\n        } catch(err) {} \r\n    \r\n        try {\r\n            for (let i = 0; i < 7; i++) {\r\n                let here = this.playBoard[row + i][column + i];\r\n                bottomRight = i;\r\n            }\r\n        } catch(err) {} \r\n    \r\n        leftTop = leftTop * -1;\r\n    \r\n        for (let i = leftTop; i <= bottomRight; i++) {\r\n            myString += this.playBoard[row + i][column + i];\r\n        }\r\n    \r\n        return myString;\r\n    }\r\n    \r\n    checkDiagonalslbrt(row, column) {  // left bottom to right top\r\n        let bottomLeft = 0;\r\n        let topRight = 0;\r\n    \r\n        let myString = \"\";\r\n    \r\n        try {\r\n            for (let i = 0; i < 7; i++) {\r\n                let here = this.playBoard[row + i][column - i];\r\n                bottomLeft = i;\r\n            }\r\n        } catch(err) {} \r\n    \r\n        try {\r\n            for (let i = 0; i < 7; i++) {\r\n                let here = this.playBoard[row - i][column + i];\r\n                topRight = i;\r\n            }\r\n        } catch(err) {} \r\n    \r\n        bottomLeft = bottomLeft * -1;\r\n    \r\n        for (let i = bottomLeft; i <= topRight; i++) {\r\n            myString += this.playBoard[row - i][column + i];\r\n        }\r\n    \r\n        return myString;\r\n    }\r\n\r\n    \r\n}\r\n\r\n// .............................................................\r\n\r\n\r\nlet b = new Board();\r\n\r\n// on press off any fields\r\nfunction addItem() {\r\n    let numbers = this.classList[1];\r\n    let column = parseInt(numbers[1]);\r\n\r\n    // if human's turn\r\n    if (b.player % 2 == 0) {\r\n        \r\n        b.setField(column, \"x\");\r\n\r\n\r\n        let beans = false;\r\n        setTimeout(function() { // https://stackoverflow.com/questions/15694470/javascript-wait-function\r\n            //b.setField(b.algorithm.giveMeColumn(), \"o\");\r\n            b.algorithm.play();\r\n            b.setField(b.algorithm.getNextMove(), \"o\");\r\n        }, 350);\r\n\r\n        //b.setField(b.algorithm.giveMeColumn(), \"o\");\r\n\r\n    }\r\n}\r\n\r\n\r\n"],"sourceRoot":""}